import cv2
import mediapipe as mp
import math

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7)

# Initialize OpenCV
cap = cv2.VideoCapture(0)

# Function to calculate Euclidean distance between two landmarks
def calculate_distance(landmark1, landmark2):
    return math.sqrt((landmark1.x - landmark2.x)**2 + (landmark1.y - landmark2.y)**2)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("Ignoring empty camera frame.")
        continue

    # Flip the image horizontally for a later selfie-view display
    frame = cv2.flip(frame, 1)

    # Convert the BGR image to RGB
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Process the image and detect hands
    results = hands.process(rgb_frame)

    # Check if hand landmarks are detected
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            # Get landmarks 4 (tip of thumb) and 9 (palm)
            landmark_4 = hand_landmarks.landmark[4]
            landmark_9 = hand_landmarks.landmark[9]

            # Calculate distance between landmark 4 and 9
            distance = calculate_distance(landmark_4, landmark_9)

            # Define a threshold for "close" distance
            distance_threshold = 0.05  # You can adjust this value based on your needs

            # Check if hand is closed (fist)
            tip_ids = [4, 8, 12, 16, 20]  # Landmark IDs for fingertips
            closed = True
            for id in tip_ids:
                if hand_landmarks.landmark[id].y < hand_landmarks.landmark[id - 1].y:
                    closed = False
                    break

            # If distance is less than threshold OR hand is closed, display "FREEZE"
            if distance < distance_threshold or closed:
                cv2.putText(frame, "FREEZE", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 9, cv2.LINE_AA)

    # Display the frame
    cv2.imshow('Hand Detection', frame)

    # Break the loop on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()